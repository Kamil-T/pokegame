{"version":3,"sources":["components/Pokecard.module.css","components/Pokedex.module.css","components/Pokecard.js","components/Pokedex.js","components/Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pokecard","number","imgSrc","this","props","id","slice","className","s","pokecard","pokecardTitle","name","src","alt","pokecardData","type","exp","Component","Pokedex","title","isWinner","pokedexWinner","pokedexLoser","pokedex","pokedexCards","pokemon","map","p","base_experience","defaultProps","Pokegame","hand1","hand2","length","randInx","Math","floor","random","randPokemon","splice","push","exp1","reduce","exp2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc2f8305.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pokecard\":\"Pokecard_pokecard__f5c1v\",\"pokecardTitle\":\"Pokecard_pokecardTitle__1w9Iu\",\"pokecardData\":\"Pokecard_pokecardData__3B18s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pokedexCards\":\"Pokedex_pokedexCards__3ixEF\",\"pokedexWinner\":\"Pokedex_pokedexWinner__2c8Z6\",\"pokedexLoser\":\"Pokedex_pokedexLoser__3TZgD\"};","import React, { Component } from 'react'\nimport s from './Pokecard.module.css'\n\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/'\n\nlet padToThree = number => (number <= 999 ? `00${number}`.slice(-3) : number)\nclass Pokecard extends Component {\n  render() {\n    let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`\n    return (\n      <div className={s.pokecard}>\n        <h1 className={s.pokecardTitle}>{this.props.name}</h1>\n        <img src={imgSrc} alt={this.props.name} />\n        <div className={s.pokecardData}>Type: {this.props.type}</div>\n        <div className={s.pokecardData}>Exp: {this.props.exp}</div>\n      </div>\n    )\n  }\n}\n\nexport default Pokecard\n","import React, { Component } from 'react'\nimport Pokecard from './Pokecard'\nimport s from './Pokedex.module.css'\n\nclass Pokedex extends Component {\n  static defaultProps = {\n    pokemon: [\n      { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n      { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n      { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n      { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n      { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n      { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n      { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n      { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n    ]\n  }\n\n  render() {\n    let title\n    if (this.props.isWinner) {\n      title = <h1 className={s.pokedexWinner}>Winning Hand</h1>\n    } else {\n      title = <h1 className={s.pokedexLoser}>Losing Hand</h1>\n    }\n\n    return (\n      <div className={s.pokedex}>\n        <h1>Pokedex</h1>\n        <p>Total exp: {this.props.exp}</p>\n        {title}\n        <div className={s.pokedexCards}>\n          {this.props.pokemon.map(p => (\n            <Pokecard id={p.id} name={p.name} type={p.type} exp={p.base_experience} />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Pokedex\n","import React, { Component } from 'react'\nimport Pokedex from './Pokedex'\n\nclass Pokegame extends Component {\n  static defaultProps = {\n    pokemon: [\n      { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n      { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n      { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n      { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n      { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n      { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n      { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n      { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n    ]\n  }\n\n  render() {\n    let hand1 = []\n    let hand2 = [...this.props.pokemon]\n\n    while (hand1.length < hand2.length) {\n      let randInx = Math.floor(Math.random() * hand2.length)\n      let randPokemon = hand2.splice(randInx, 1)[0]\n      hand1.push(randPokemon)\n    }\n\n    let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0)\n    let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0)\n\n    return (\n      <div>\n        <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2} />\n        <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1} />\n      </div>\n    )\n  }\n}\n\nexport default Pokegame\n","import React from 'react'\nimport Pokegame from './components/Pokegame'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Pokegame />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}